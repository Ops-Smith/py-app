name: "3 - Production Deployment"

on:
  workflow_run:
    workflows: ["2 - Staging Validation"]
    types: [completed]
    branches: [staging]
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  production-deployment:
    # Only run if staging workflow succeeded OR direct push to master
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (github.event_name == 'pull_request' && github.base_ref == 'master')
    runs-on: self-hosted
    env:
      image_name: pyapp-image
      username: ${{ secrets.DOCKERHUB_USERNAME }}
    
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
       
      - name: 📧 Notify Production Start
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚀 Production Deployment Started"
          to:  ${{ secrets.EMAIL }}
          from: "DevOps Admin"
          body: |
            Production deployment has started!
            Trigger: ${{ github.event_name }}
            Branch: ${{ github.ref_name }}

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 📥 Determine Production Version
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            # Get SHA from the staging workflow that triggered this
            SHA="${{ github.event.workflow_run.head_sha }}"
            echo "Triggered by staging workflow - SHA: $SHA"
          else
            # Direct push or PR to master
            SHA="${{ github.sha }}"
            echo "Direct action on master - SHA: $SHA"
          fi
          echo "version=1.1.0-$SHA" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: 🚀 Deploy to Production
        run: |
          echo "🔄 Deploying version ${{ steps.vars.outputs.version }} to production"
          
          # Build or pull the image
          docker build -t $username/$image_name:${{ steps.vars.outputs.version }} . || echo "Build failed, trying to pull..."
          docker pull $username/$image_name:${{ steps.vars.outputs.version }} || echo "Pull also failed, using staging tag"
          
          # Use staging tag as fallback
          docker pull $username/$image_name:staging || echo "Using locally built image"
          
          # Tag as production
          docker tag $username/$image_name:${{ steps.vars.outputs.version }} $username/$image_name:production || \
          docker tag $username/$image_name:staging $username/$image_name:production
          
          # Stop existing container
          echo "🛑 Stopping existing container..."
          docker stop flask-app || true
          docker rm flask-app || true
          
          # Deploy new container
          echo "🚀 Starting new container..."
          docker run -d \
            --name flask-app \
            -p 5001:5000 \
            --restart unless-stopped \
            $username/$image_name:production
          
          # Health check with retries
          echo "⏳ Performing health check..."
          for i in {1..5}; do
            if curl -f http://localhost:5001/; then
              echo "✅ Production deployment successful!"
              break
            else
              echo "⚠️ Attempt $i: Application not ready yet..."
              sleep 10
            fi
          done

      - name: 🏷️ Push Production Tags
        run: |
          docker push $username/$image_name:production || echo "Push failed, continuing..."
          docker tag $username/$image_name:production $username/$image_name:latest
          docker push $username/$image_name:latest || echo "Latest push failed, continuing..."

      - name: 📧 Notify Production Success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🎉 PRODUCTION DEPLOYMENT SUCCESS - Version ${{ steps.vars.outputs.version }}"
          to:  ${{ secrets.EMAIL }}
          from: "DevOps Admin"
          body: |
            🎉 PRODUCTION DEPLOYMENT COMPLETED SUCCESSFULLY!
            
            🚀 New Docker Image Release:
            Version: ${{ steps.vars.outputs.version }}
            
            ✅ Application is now LIVE in production
            ✅ All health checks passed
            ✅ Production tags pushed

      - name: 📧 Notify Production Failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 PRODUCTION DEPLOYMENT FAILED"
          to:  ${{ secrets.EMAIL }}
          from: "DevOps Admin"
          body: |
            🚨 PRODUCTION DEPLOYMENT FAILED!
            Version: ${{ steps.vars.outputs.version }}
            ⚠️ Immediate attention required!